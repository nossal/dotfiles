#!/usr/bin/env bash
set -euo pipefail
# autoinstall: sh "$(curl -fsL https://noss.al/dot)"

# 1. check and install the base (OS)
#    dnf install -y git zsh tmux
# 1.1 use zsh
#    sudo chsh nossal -s /bin/zsh
# 2. clone the dotfiles
# 3. make the config file links
# 4. install prompt (starship)
# 5. install tools
# 6. then reload the shell

DOTFILES_HOME="$HOME/.dotfiles"
LOCAL_BIN_DIR="$HOME/.local/bin"

REPO="https://github.com/nossal/dotfiles"

function has() {
  command -v "$1" 1>/dev/null 2>&1
}

function install_gum() {
  local GUM_VERSION="$1"
  local KERNEL="$2"
  local ARCH="$3"
  local URL TMP_DIR NAME

  NAME="gum_${GUM_VERSION}_${KERNEL}_${ARCH}"
  URL="https://github.com/charmbracelet/gum/releases/download/v${GUM_VERSION}/${NAME}.tar.gz"
  TMP_DIR="$(mktemp -d)"

  curl -s -L "$URL" -o "$TMP_DIR/gum.tar.gz" &&
  tar -xzf "$TMP_DIR/gum.tar.gz" -C "$TMP_DIR" &&
  cp "$TMP_DIR/${NAME}/gum" "$LOCAL_BIN_DIR" &&
  rm -rf "$TMP_DIR"
}

function _shell() {
  if command -v zsh &> /dev/null; then
    [[ ! $SHELL == *"/zsh" ]] && chsh -s /bin/zsh
    echo "zsh"
  else
    echo "bash"
  fi
}
shell="$(_shell)"

function is_wsl() {
  IFS='-' read -r _ sub rest <<< "$(uname -r)"
  [ "$sub" == "microsoft" ] && echo true
}

function username() {
  if [ "$(is_wsl)" = true ]; then
    echo "$(powershell.exe '$env:UserName' | sed -e 's/\r//g')"
    return
  fi
  echo "$USER"
}

function os_name() {
  case "$(uname -o)" in
    "GNU/Linux")
      local name
      # echo "It\`s Linux, baby!"
      name="$(awk -F= '$1=="ID" { print $2 }' /etc/os-release)"
      [ "$(is_wsl)" = true ] && name="$name-wsl"

      echo "$name"
      ;;
    "Darwin")
      # echo "Is\`s a Mac, man!"
      echo "mac"
      ;;
    "Msys")
      echo "msys2"
      ;;
    *)
      # echo "I dont\`t know"
      echo ""
      ;;
  esac
}

function filter() {
  local section=$1
  local file=$2
  local found=false

  while IFS= read -r line; do
    # Check if the line contains the section name
    if [[ "$line" == "["*"$section"*"]" ]]; then
      found=true
      continue  # Skip printing the section name
    fi
    if [[ "$line" != "["*"$section"*"]" && "$line" == "["* ]]; then
      found=false
      continue  # Skip printing the section name
    fi

    # If the section is found, print the line
    if [ "$found" = true ]; then
      echo "$line"
    fi
  done < "$file"
}

function make_links() {
  echo "LINKS"
  local profile=$1
  local tag="${2:-default}"

  [ -n "$profile" ] && profile="-$profile"

  local links_file="$DOTFILES_HOME/links$profile.txt"
  echo "> $links_file"

  if [ ! -f "$links_file" ]; then
    echo "File $links_file not found."
    # exit 1
    return
  fi

  while IFS= read -r line; do
    IFS=' ' read -r key value <<< "$line"
    local target="$HOME/$value"
    local target_dir="$(dirname $target)"
    [ ! -L "$target_dir" ] && mkdir -p "$target_dir"
    [ ! -L "$target" ] && ln -s "$DOTFILES_HOME/$key" "$target"

    echo "$target"
    # echo "ln -s $DOTFILES_HOME/$key" "$HOME/$value"
  done <<< "$(filter "$tag" "$links_file")"
}

function clean() {
  echo "FIX"
  broken_links=$(find "$HOME" -maxdepth 2 -type l ! -exec test -e {} \; -print 2> /dev/null)
  if [ -n "$broken_links" ]; then
    echo  -e "Removing broken synlinks:\n$broken_links"
    echo "$broken_links" | xargs rm
  fi
}

function fonts() {
  local target os

  os="$(os_name)"
  echo "$os"

  target="$HOME/.local/share/fonts"

  [ "$os" = "mac" ] && \
    target="$HOME/Library/Fonts"

  [ "$(is_wsl)" = true ] && \
    target="/mnt/c/Users/$(username)/AppData/Local/Microsoft/Windows/Fonts"

  [ -n "$target" ] && \
    cp -rf "$DOTFILES_HOME/fonts/*" "$target/"
}

function tools() {
  echo "TOOLS"
}

function update() {
  echo "UPDATE"
  cd "$DOTFILES_HOME" && git pull

  mise self-update
  mise up
}

function install() {
  echo "INSTALL"
  # install_gum 0.15.2 "$(uname -s)" "$(uname -m)"
  clean
  make_links "$@"
  fonts
  tools
}

function bootstrap() {
  # check os. requirements
  if ! has git; then
    echo "git is required to bootstrap the dotfiles."
    exit 1
  fi

  # check if the dotfiles are already installed
  if [ -d "$DOTFILES_HOME" ]; then
    echo "Dotfiles already installed. Updating..."
    update
  else
    git clone "$REPO" "$DOTFILES_HOME"
  fi

  [ ! -a "$LOCAL_BIN_DIR" ] && \
    mkdir -p "$LOCAL_BIN_DIR"
  [[ ! "$PATH" == *"$LOCAL_BIN_DIR"* ]] && \
    export PATH="$LOCAL_BIN_DIR:$PATH"

  local os_setup="$DOTFILES_HOME/os/$(os_name)/setup"

  [ -f "$os_setup" ] && \
    $("$os_setup") "$DOTFILES_HOME" "$LOCAL_BIN_DIR"

  echo "BOOT"
  install "$@"
}

function usage() {
  echo "Usage: dot [OPTIONS] [COMMAND]"
  echo "Options:"
  echo "  -h, --help      Show this help message"
  echo "  -r, --repo      Specify the repository URL"
  echo "Commands:"
  echo "  bootstrap       Bootstrap the dotfiles"
  echo "  update          Update the dotfiles"
  echo "  fix             Fix broken links"
  echo "  links           Show links"
  echo "  install         Install the dotfiles"
  echo "  fonts           Install fonts"
  echo "  help            Show this help message"
}

function main() {
  local command=""
  if [[ $# -eq 0 ]]; then
    command="bootstrap"
  fi

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      -r|--repo)
        REPO="$2"
        shift 2
        ;;
      -*)
        error "No option: $1"
        ;;
      *)
        if [[ -z "$command" ]]; then
          command="$1"
        else
          echo "Unexpected argument: $1"
          exit 1
        fi
        shift
        ;;
    esac
  done
  echo "$REPO"

  case "${command}" in
    update)
      update
      ;;
    fix)
      clean
      ;;
    links)
      make_links "$@"
      ;;
    *)
      bootstrap "$@"
      ;;
  esac
}

main "$@"

