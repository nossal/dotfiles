#!/usr/bin/env bash

# autoinstall: sh "$(curl -fsL https://noss.al/dot)"

DOTFILES_HOME="$HOME/.dotfiles"
LOCAL_BIN_DIR="$HOME/.local/bin"

function _shell() {
  if command -v zsh &> /dev/null; then
    [[ ! $SHELL == *"/zsh" ]] && chsh -s /bin/zsh
    echo "zsh"
  else
    echo "bash"
  fi
}
shell="$(_shell)"

function is_wsl() {
  IFS='-' read -r _ sub rest <<< "$(uname -r)"
  [ "$sub" == "microsoft" ] && echo true
}

function username() {
  if [ "$(is_wsl)" = true ]; then
    echo "$(powershell.exe '$env:UserName' | sed -e 's/\r//g')"
    return
  fi
  echo "$USER"
}

function os_name() {
  case "$(uname -o)" in
    "GNU/Linux")
      local name
      # echo "It\`s Linux, baby!"
      name="$(awk -F= '$1=="ID" { print $2 }' /etc/os-release)"
      [ "$(is_wsl)" = true ] && name="$name-wsl"

      echo "$name"
      ;;
    "Darwin")
      # echo "Is\`s a Mac, man!"
      echo "mac"
      ;;
    "Msys")
      echo "msys2"
      ;;
    *)
      # echo "I dont\`t know"
      echo ""
      ;;
  esac
}

function filter() {
  local section=$1
  local file=$2
  local found=false

  while IFS= read -r line; do
    # Check if the line contains the section name
    if [[ "$line" == "["*"$section"*"]" ]]; then
      found=true
      continue  # Skip printing the section name
    fi
    if [[ "$line" != "["*"$section"*"]" && "$line" == "["* ]]; then
      found=false
      continue  # Skip printing the section name
    fi

    # If the section is found, print the line
    if [ "$found" = true ]; then
      echo "$line"
    fi
  done < "$file"
}

function make_links() {
  local profile=$1
  local tag="${2:-default}"

  [ -n "$profile" ] && profile="-$profile"

  local links_file="$DOTFILES_HOME/links$profile.txt"
  echo "> $links_file"

  if [ ! -f "$links_file" ]; then
    echo "File $links_file not found."
    # exit 1
    return
  fi

  while IFS= read -r line; do
    IFS=' ' read -r key value <<< "$line"
    local target="$HOME/$value"
    local target_dir="$(dirname $target)"
    [ ! -L "$target_dir" ] && mkdir -p "$target_dir"
    [ ! -L "$target" ] && ln -s "$DOTFILES_HOME/$key" "$target"

    echo "$target"
    # echo "ln -s $DOTFILES_HOME/$key" "$HOME/$value"
  done <<< "$(filter "$tag" "$links_file")"
}

function clean() {
  broken_links=$(find "$HOME" -maxdepth 2 -type l ! -exec test -e {} \; -print 2> /dev/null)
  if [ -n "$broken_links" ]; then
    echo  -e "Removing broken synlinks:\n$broken_links"
    echo "$broken_links" | xargs rm
  fi
}

function fonts() {
  local target os

  os="$(os_name)"
  [ "$os" = "macos" ] && \
    target="$HOME/Library/Fonts"

  [ "$(is_wsl)" = true ] && \
    target="/mnt/c/Users/$(username)/AppData/Local/Microsoft/Windows/Fonts"

  [ -n "$target" ] && \
    cp -rf "$DOTFILES_HOME/fonts/*" "$target/"

  echo "fonts"
}

function bootstrap() {
  [ ! -a "$LOCAL_BIN_DIR" ] && mkdir -p "$LOCAL_BIN_DIR"

  git clone https://github.com/nossal/dotfiles "$DOTFILES_HOME"
}

echo "This os is: $(os_name)"
# wsl
# msys2
# macos
# server ssh (Linux)
# server ssh dev (Linux)
#

clean
echo "---------"
# run the default profile file with default tags
make_links
make_links "" "$shell"
echo "---------"

# cp $DOTFILES_HOME/bin/\* $LOCAL_BIN_DIR

